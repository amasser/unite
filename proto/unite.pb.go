// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: unite.proto

package unite

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MessageType int32

const (
	MessageType_RESERVED    MessageType = 0
	MessageType_CONNECT     MessageType = 1
	MessageType_CONNACK     MessageType = 2
	MessageType_PUBLISH     MessageType = 3
	MessageType_PUBACK      MessageType = 4
	MessageType_PUBREC      MessageType = 5
	MessageType_PUBREL      MessageType = 6
	MessageType_PUBCOMP     MessageType = 7
	MessageType_SUBSCRIBE   MessageType = 8
	MessageType_SUBACK      MessageType = 9
	MessageType_UNSUBSCRIBE MessageType = 10
	MessageType_UNSUBACK    MessageType = 11
	MessageType_PINGREQ     MessageType = 12
	MessageType_PINGRESP    MessageType = 13
	MessageType_DISCONNECT  MessageType = 14
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "RESERVED",
		1:  "CONNECT",
		2:  "CONNACK",
		3:  "PUBLISH",
		4:  "PUBACK",
		5:  "PUBREC",
		6:  "PUBREL",
		7:  "PUBCOMP",
		8:  "SUBSCRIBE",
		9:  "SUBACK",
		10: "UNSUBSCRIBE",
		11: "UNSUBACK",
		12: "PINGREQ",
		13: "PINGRESP",
		14: "DISCONNECT",
	}
	MessageType_value = map[string]int32{
		"RESERVED":    0,
		"CONNECT":     1,
		"CONNACK":     2,
		"PUBLISH":     3,
		"PUBACK":      4,
		"PUBREC":      5,
		"PUBREL":      6,
		"PUBCOMP":     7,
		"SUBSCRIBE":   8,
		"SUBACK":      9,
		"UNSUBSCRIBE": 10,
		"UNSUBACK":    11,
		"PINGREQ":     12,
		"PINGRESP":    13,
		"DISCONNECT":  14,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_unite_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_unite_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{0}
}

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Network  string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ConnInfo) Reset() {
	*x = ConnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnInfo) ProtoMessage() {}

func (x *ConnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnInfo.ProtoReflect.Descriptor instead.
func (*ConnInfo) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{2}
}

func (x *ConnInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ConnInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ConnInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type InMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*InMsg_Pingreq
	//	*InMsg_Sub
	//	*InMsg_Unsub
	//	*InMsg_Pub
	//	*InMsg_Pubrec
	//	*InMsg_Pubrel
	//	*InMsg_Pubcomp
	Message isInMsg_Message `protobuf_oneof:"Message"`
}

func (x *InMsg) Reset() {
	*x = InMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InMsg) ProtoMessage() {}

func (x *InMsg) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InMsg.ProtoReflect.Descriptor instead.
func (*InMsg) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{3}
}

func (m *InMsg) GetMessage() isInMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *InMsg) GetPingreq() *Pingreq {
	if x, ok := x.GetMessage().(*InMsg_Pingreq); ok {
		return x.Pingreq
	}
	return nil
}

func (x *InMsg) GetSub() *Subscribe {
	if x, ok := x.GetMessage().(*InMsg_Sub); ok {
		return x.Sub
	}
	return nil
}

func (x *InMsg) GetUnsub() *Unsubscribe {
	if x, ok := x.GetMessage().(*InMsg_Unsub); ok {
		return x.Unsub
	}
	return nil
}

func (x *InMsg) GetPub() *Publish {
	if x, ok := x.GetMessage().(*InMsg_Pub); ok {
		return x.Pub
	}
	return nil
}

func (x *InMsg) GetPubrec() *Pubrec {
	if x, ok := x.GetMessage().(*InMsg_Pubrec); ok {
		return x.Pubrec
	}
	return nil
}

func (x *InMsg) GetPubrel() *Pubrel {
	if x, ok := x.GetMessage().(*InMsg_Pubrel); ok {
		return x.Pubrel
	}
	return nil
}

func (x *InMsg) GetPubcomp() *Pubcomp {
	if x, ok := x.GetMessage().(*InMsg_Pubcomp); ok {
		return x.Pubcomp
	}
	return nil
}

type isInMsg_Message interface {
	isInMsg_Message()
}

type InMsg_Pingreq struct {
	Pingreq *Pingreq `protobuf:"bytes,1,opt,name=pingreq,proto3,oneof"`
}

type InMsg_Sub struct {
	Sub *Subscribe `protobuf:"bytes,2,opt,name=sub,proto3,oneof"`
}

type InMsg_Unsub struct {
	Unsub *Unsubscribe `protobuf:"bytes,3,opt,name=unsub,proto3,oneof"`
}

type InMsg_Pub struct {
	Pub *Publish `protobuf:"bytes,4,opt,name=pub,proto3,oneof"`
}

type InMsg_Pubrec struct {
	Pubrec *Pubrec `protobuf:"bytes,5,opt,name=pubrec,proto3,oneof"`
}

type InMsg_Pubrel struct {
	Pubrel *Pubrel `protobuf:"bytes,6,opt,name=pubrel,proto3,oneof"`
}

type InMsg_Pubcomp struct {
	Pubcomp *Pubcomp `protobuf:"bytes,7,opt,name=pubcomp,proto3,oneof"`
}

func (*InMsg_Pingreq) isInMsg_Message() {}

func (*InMsg_Sub) isInMsg_Message() {}

func (*InMsg_Unsub) isInMsg_Message() {}

func (*InMsg_Pub) isInMsg_Message() {}

func (*InMsg_Pubrec) isInMsg_Message() {}

func (*InMsg_Pubrel) isInMsg_Message() {}

func (*InMsg_Pubcomp) isInMsg_Message() {}

type OutMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*OutMsg_Pingresp
	//	*OutMsg_Suback
	//	*OutMsg_Unsuback
	//	*OutMsg_Pub
	//	*OutMsg_Puback
	//	*OutMsg_Pubrec
	//	*OutMsg_Pubrel
	//	*OutMsg_Pubcomp
	Message isOutMsg_Message `protobuf_oneof:"Message"`
}

func (x *OutMsg) Reset() {
	*x = OutMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutMsg) ProtoMessage() {}

func (x *OutMsg) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutMsg.ProtoReflect.Descriptor instead.
func (*OutMsg) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{4}
}

func (m *OutMsg) GetMessage() isOutMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *OutMsg) GetPingresp() *Pingresp {
	if x, ok := x.GetMessage().(*OutMsg_Pingresp); ok {
		return x.Pingresp
	}
	return nil
}

func (x *OutMsg) GetSuback() *Suback {
	if x, ok := x.GetMessage().(*OutMsg_Suback); ok {
		return x.Suback
	}
	return nil
}

func (x *OutMsg) GetUnsuback() *Unsuback {
	if x, ok := x.GetMessage().(*OutMsg_Unsuback); ok {
		return x.Unsuback
	}
	return nil
}

func (x *OutMsg) GetPub() *Publish {
	if x, ok := x.GetMessage().(*OutMsg_Pub); ok {
		return x.Pub
	}
	return nil
}

func (x *OutMsg) GetPuback() *Puback {
	if x, ok := x.GetMessage().(*OutMsg_Puback); ok {
		return x.Puback
	}
	return nil
}

func (x *OutMsg) GetPubrec() *Pubrec {
	if x, ok := x.GetMessage().(*OutMsg_Pubrec); ok {
		return x.Pubrec
	}
	return nil
}

func (x *OutMsg) GetPubrel() *Pubrel {
	if x, ok := x.GetMessage().(*OutMsg_Pubrel); ok {
		return x.Pubrel
	}
	return nil
}

func (x *OutMsg) GetPubcomp() *Pubcomp {
	if x, ok := x.GetMessage().(*OutMsg_Pubcomp); ok {
		return x.Pubcomp
	}
	return nil
}

type isOutMsg_Message interface {
	isOutMsg_Message()
}

type OutMsg_Pingresp struct {
	Pingresp *Pingresp `protobuf:"bytes,1,opt,name=pingresp,proto3,oneof"`
}

type OutMsg_Suback struct {
	Suback *Suback `protobuf:"bytes,2,opt,name=suback,proto3,oneof"`
}

type OutMsg_Unsuback struct {
	Unsuback *Unsuback `protobuf:"bytes,3,opt,name=unsuback,proto3,oneof"`
}

type OutMsg_Pub struct {
	Pub *Publish `protobuf:"bytes,4,opt,name=pub,proto3,oneof"`
}

type OutMsg_Puback struct {
	Puback *Puback `protobuf:"bytes,5,opt,name=puback,proto3,oneof"`
}

type OutMsg_Pubrec struct {
	Pubrec *Pubrec `protobuf:"bytes,8,opt,name=pubrec,proto3,oneof"`
}

type OutMsg_Pubrel struct {
	Pubrel *Pubrel `protobuf:"bytes,9,opt,name=pubrel,proto3,oneof"`
}

type OutMsg_Pubcomp struct {
	Pubcomp *Pubcomp `protobuf:"bytes,10,opt,name=pubcomp,proto3,oneof"`
}

func (*OutMsg_Pingresp) isOutMsg_Message() {}

func (*OutMsg_Suback) isOutMsg_Message() {}

func (*OutMsg_Unsuback) isOutMsg_Message() {}

func (*OutMsg_Pub) isOutMsg_Message() {}

func (*OutMsg_Puback) isOutMsg_Message() {}

func (*OutMsg_Pubrec) isOutMsg_Message() {}

func (*OutMsg_Pubrel) isOutMsg_Message() {}

func (*OutMsg_Pubcomp) isOutMsg_Message() {}

type FixedHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType     MessageType `protobuf:"varint,1,opt,name=MessageType,proto3,enum=unite.MessageType" json:"MessageType,omitempty"`
	Dup             bool        `protobuf:"varint,2,opt,name=Dup,proto3" json:"Dup,omitempty"`
	Qos             int32       `protobuf:"varint,3,opt,name=Qos,proto3" json:"Qos,omitempty"`
	Retain          bool        `protobuf:"varint,4,opt,name=Retain,proto3" json:"Retain,omitempty"`
	RemainingLength int32       `protobuf:"varint,5,opt,name=RemainingLength,proto3" json:"RemainingLength,omitempty"`
}

func (x *FixedHeader) Reset() {
	*x = FixedHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedHeader) ProtoMessage() {}

func (x *FixedHeader) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedHeader.ProtoReflect.Descriptor instead.
func (*FixedHeader) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{5}
}

func (x *FixedHeader) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_RESERVED
}

func (x *FixedHeader) GetDup() bool {
	if x != nil {
		return x.Dup
	}
	return false
}

func (x *FixedHeader) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

func (x *FixedHeader) GetRetain() bool {
	if x != nil {
		return x.Retain
	}
	return false
}

func (x *FixedHeader) GetRemainingLength() int32 {
	if x != nil {
		return x.RemainingLength
	}
	return 0
}

// Connect represents a connect packet.
type Conn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoName     string `protobuf:"bytes,1,opt,name=ProtoName,proto3" json:"ProtoName,omitempty"`
	Version       int32  `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	InsecureFlag  bool   `protobuf:"varint,3,opt,name=InsecureFlag,proto3" json:"InsecureFlag,omitempty"`
	UsernameFlag  bool   `protobuf:"varint,4,opt,name=UsernameFlag,proto3" json:"UsernameFlag,omitempty"`
	PasswordFlag  bool   `protobuf:"varint,5,opt,name=PasswordFlag,proto3" json:"PasswordFlag,omitempty"`
	CleanSessFlag bool   `protobuf:"varint,9,opt,name=CleanSessFlag,proto3" json:"CleanSessFlag,omitempty"`
	KeepAlive     int32  `protobuf:"varint,10,opt,name=KeepAlive,proto3" json:"KeepAlive,omitempty"`
	ClientID      string `protobuf:"bytes,11,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	Username      string `protobuf:"bytes,14,opt,name=Username,proto3" json:"Username,omitempty"`
	Password      string `protobuf:"bytes,15,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *Conn) Reset() {
	*x = Conn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conn) ProtoMessage() {}

func (x *Conn) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conn.ProtoReflect.Descriptor instead.
func (*Conn) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{6}
}

func (x *Conn) GetProtoName() string {
	if x != nil {
		return x.ProtoName
	}
	return ""
}

func (x *Conn) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Conn) GetInsecureFlag() bool {
	if x != nil {
		return x.InsecureFlag
	}
	return false
}

func (x *Conn) GetUsernameFlag() bool {
	if x != nil {
		return x.UsernameFlag
	}
	return false
}

func (x *Conn) GetPasswordFlag() bool {
	if x != nil {
		return x.PasswordFlag
	}
	return false
}

func (x *Conn) GetCleanSessFlag() bool {
	if x != nil {
		return x.CleanSessFlag
	}
	return false
}

func (x *Conn) GetKeepAlive() int32 {
	if x != nil {
		return x.KeepAlive
	}
	return 0
}

func (x *Conn) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Conn) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Conn) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Connack represents a connack packet.
// 0x00 connection accepted
// 0x01 refused: unacceptable proto version
// 0x02 refused: identifier rejected
// 0x03 refused server unavailiable
// 0x04 bad user or password
// 0x05 not authorized
type Connack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode int32 `protobuf:"varint,1,opt,name=ReturnCode,proto3" json:"ReturnCode,omitempty"`
	ConnID     int32 `protobuf:"varint,2,opt,name=ConnID,proto3" json:"ConnID,omitempty"`
}

func (x *Connack) Reset() {
	*x = Connack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connack) ProtoMessage() {}

func (x *Connack) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connack.ProtoReflect.Descriptor instead.
func (*Connack) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{7}
}

func (x *Connack) GetReturnCode() int32 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *Connack) GetConnID() int32 {
	if x != nil {
		return x.ConnID
	}
	return 0
}

//Pingreq is a keepalive
type Pingreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Pingreq) Reset() {
	*x = Pingreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pingreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pingreq) ProtoMessage() {}

func (x *Pingreq) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pingreq.ProtoReflect.Descriptor instead.
func (*Pingreq) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{8}
}

//Pingresp is for saying "hey, the server is alive"
type Pingresp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Pingresp) Reset() {
	*x = Pingresp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pingresp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pingresp) ProtoMessage() {}

func (x *Pingresp) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pingresp.ProtoReflect.Descriptor instead.
func (*Pingresp) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{9}
}

//Disconnect is to signal you want to cease communications with the server
type Disconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32 `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
}

func (x *Disconnect) Reset() {
	*x = Disconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnect) ProtoMessage() {}

func (x *Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnect.ProtoReflect.Descriptor instead.
func (*Disconnect) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{10}
}

func (x *Disconnect) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

// Publish represents a publish packet.
type Publish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32  `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Payload   string `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Qos       int32  `protobuf:"varint,4,opt,name=Qos,proto3" json:"Qos,omitempty"`
}

func (x *Publish) Reset() {
	*x = Publish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publish) ProtoMessage() {}

func (x *Publish) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publish.ProtoReflect.Descriptor instead.
func (*Publish) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{11}
}

func (x *Publish) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Publish) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Publish) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Publish) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

//Puback is sent for QOS level one to verify the receipt of a publish
//Qot the spec: "A PUBACK Packet is sent by a server in response to a PUBLISH Packet from a publishing client, and by a subscriber in response to a PUBLISH Packet from the server."
type Puback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32 `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
}

func (x *Puback) Reset() {
	*x = Puback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Puback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Puback) ProtoMessage() {}

func (x *Puback) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Puback.ProtoReflect.Descriptor instead.
func (*Puback) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{12}
}

func (x *Puback) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

//Pubrec is for verifying the receipt of a publish
//Qoth the spec:"It is the second Packet of the QoS level 2 protocol flow. A PUBREC Packet is sent by the server in response to a PUBLISH Packet from a publishing client, or by a subscriber in response to a PUBLISH Packet from the server."
type Pubrec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32 `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Qos       int32 `protobuf:"varint,2,opt,name=Qos,proto3" json:"Qos,omitempty"`
}

func (x *Pubrec) Reset() {
	*x = Pubrec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pubrec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pubrec) ProtoMessage() {}

func (x *Pubrec) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pubrec.ProtoReflect.Descriptor instead.
func (*Pubrec) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{13}
}

func (x *Pubrec) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Pubrec) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

//Pubrel is a response to pubrec from either the client or server.
type Pubrel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32 `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Qos       int32 `protobuf:"varint,2,opt,name=Qos,proto3" json:"Qos,omitempty"`
}

func (x *Pubrel) Reset() {
	*x = Pubrel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pubrel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pubrel) ProtoMessage() {}

func (x *Pubrel) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pubrel.ProtoReflect.Descriptor instead.
func (*Pubrel) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{14}
}

func (x *Pubrel) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Pubrel) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

//Pubcomp is for saying is in response to a pubrel sent by the publisher
//the final member of the QOS2 flow. both sides have said "hey, we did it!"
type Pubcomp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32 `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
}

func (x *Pubcomp) Reset() {
	*x = Pubcomp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pubcomp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pubcomp) ProtoMessage() {}

func (x *Pubcomp) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pubcomp.ProtoReflect.Descriptor instead.
func (*Pubcomp) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{15}
}

func (x *Pubcomp) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

//Subscriber is pairing the Qos and topic together
//for the QOS' pairs in unsubscribe and subscribe
type Subscriber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Qos   int32  `protobuf:"varint,3,opt,name=Qos,proto3" json:"Qos,omitempty"`
}

func (x *Subscriber) Reset() {
	*x = Subscriber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscriber) ProtoMessage() {}

func (x *Subscriber) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscriber.ProtoReflect.Descriptor instead.
func (*Subscriber) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{16}
}

func (x *Subscriber) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscriber) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

//Subscribe tells the server which topics the client would like to subscribe to
type Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID   int32         `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Subscribers []*Subscriber `protobuf:"bytes,2,rep,name=Subscribers,proto3" json:"Subscribers,omitempty"`
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{17}
}

func (x *Subscribe) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Subscribe) GetSubscribers() []*Subscriber {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

//Suback is to say "hey, you got it buddy. I will send you messages that fit this pattern"
type Suback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32   `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Qos       []int32 `protobuf:"varint,2,rep,packed,name=Qos,proto3" json:"Qos,omitempty"`
}

func (x *Suback) Reset() {
	*x = Suback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suback) ProtoMessage() {}

func (x *Suback) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suback.ProtoReflect.Descriptor instead.
func (*Suback) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{18}
}

func (x *Suback) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Suback) GetQos() []int32 {
	if x != nil {
		return x.Qos
	}
	return nil
}

//Unsubscribe is the Packet to send if you don't want to subscribe to a topic anymore
type Unsubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID   int32         `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Subscribers []*Subscriber `protobuf:"bytes,2,rep,name=Subscribers,proto3" json:"Subscribers,omitempty"`
}

func (x *Unsubscribe) Reset() {
	*x = Unsubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsubscribe) ProtoMessage() {}

func (x *Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsubscribe.ProtoReflect.Descriptor instead.
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{19}
}

func (x *Unsubscribe) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Unsubscribe) GetSubscribers() []*Subscriber {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

//Unsuback is to unsubscribe as suback is to subscribe
type Unsuback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int32 `protobuf:"varint,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
}

func (x *Unsuback) Reset() {
	*x = Unsuback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unite_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unsuback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsuback) ProtoMessage() {}

func (x *Unsuback) ProtoReflect() protoreflect.Message {
	mi := &file_unite_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsuback.ProtoReflect.Descriptor instead.
func (*Unsuback) Descriptor() ([]byte, []int) {
	return file_unite_proto_rawDescGZIP(), []int{20}
}

func (x *Unsuback) GetMessageID() int32 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

var File_unite_proto protoreflect.FileDescriptor

var file_unite_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x0a,
	0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x75, 0x62, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x75, 0x62,
	0x12, 0x22, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x75, 0x62, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x72, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62,
	0x72, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x72, 0x65, 0x63, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x72, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x72, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x72, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x63, 0x6f, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x70, 0x75, 0x62, 0x63, 0x6f,
	0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe5, 0x02,
	0x0a, 0x06, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x2d, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x48, 0x00, 0x52, 0x03,
	0x70, 0x75, 0x62, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x72, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x72, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x72, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75,
	0x62, 0x72, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x72, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x07, 0x70, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x44,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x44, 0x75, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x51, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x51, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0xc2, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x41, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x61, 0x63,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x44, 0x22, 0x09, 0x0a, 0x07, 0x50, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x70,
	0x22, 0x2a, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x07,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x51, 0x6f, 0x73, 0x22, 0x26, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x38, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x51, 0x6f, 0x73, 0x22, 0x38, 0x0a, 0x06, 0x50, 0x75, 0x62,
	0x72, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x51, 0x6f, 0x73, 0x22, 0x27, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x0a,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x51,
	0x6f, 0x73, 0x22, 0x5e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x33, 0x0a,
	0x0b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x51, 0x6f, 0x73, 0x22, 0x60, 0x0a, 0x0b,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x0b, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x28,
	0x0a, 0x08, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x2a, 0xd8, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x55, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42,
	0x52, 0x45, 0x43, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x52, 0x45, 0x4c, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x42, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e,
	0x53, 0x55, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x4e, 0x47,
	0x52, 0x45, 0x51, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x0e, 0x32, 0x86, 0x01, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0c,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_unite_proto_rawDescOnce sync.Once
	file_unite_proto_rawDescData = file_unite_proto_rawDesc
)

func file_unite_proto_rawDescGZIP() []byte {
	file_unite_proto_rawDescOnce.Do(func() {
		file_unite_proto_rawDescData = protoimpl.X.CompressGZIP(file_unite_proto_rawDescData)
	})
	return file_unite_proto_rawDescData
}

var file_unite_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_unite_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_unite_proto_goTypes = []interface{}{
	(MessageType)(0),    // 0: unite.MessageType
	(*Empty)(nil),       // 1: unite.Empty
	(*Packet)(nil),      // 2: unite.Packet
	(*ConnInfo)(nil),    // 3: unite.ConnInfo
	(*InMsg)(nil),       // 4: unite.InMsg
	(*OutMsg)(nil),      // 5: unite.OutMsg
	(*FixedHeader)(nil), // 6: unite.FixedHeader
	(*Conn)(nil),        // 7: unite.Conn
	(*Connack)(nil),     // 8: unite.Connack
	(*Pingreq)(nil),     // 9: unite.Pingreq
	(*Pingresp)(nil),    // 10: unite.Pingresp
	(*Disconnect)(nil),  // 11: unite.Disconnect
	(*Publish)(nil),     // 12: unite.Publish
	(*Puback)(nil),      // 13: unite.Puback
	(*Pubrec)(nil),      // 14: unite.Pubrec
	(*Pubrel)(nil),      // 15: unite.Pubrel
	(*Pubcomp)(nil),     // 16: unite.Pubcomp
	(*Subscriber)(nil),  // 17: unite.Subscriber
	(*Subscribe)(nil),   // 18: unite.Subscribe
	(*Suback)(nil),      // 19: unite.Suback
	(*Unsubscribe)(nil), // 20: unite.Unsubscribe
	(*Unsuback)(nil),    // 21: unite.Unsuback
}
var file_unite_proto_depIdxs = []int32{
	9,  // 0: unite.InMsg.pingreq:type_name -> unite.Pingreq
	18, // 1: unite.InMsg.sub:type_name -> unite.Subscribe
	20, // 2: unite.InMsg.unsub:type_name -> unite.Unsubscribe
	12, // 3: unite.InMsg.pub:type_name -> unite.Publish
	14, // 4: unite.InMsg.pubrec:type_name -> unite.Pubrec
	15, // 5: unite.InMsg.pubrel:type_name -> unite.Pubrel
	16, // 6: unite.InMsg.pubcomp:type_name -> unite.Pubcomp
	10, // 7: unite.OutMsg.pingresp:type_name -> unite.Pingresp
	19, // 8: unite.OutMsg.suback:type_name -> unite.Suback
	21, // 9: unite.OutMsg.unsuback:type_name -> unite.Unsuback
	12, // 10: unite.OutMsg.pub:type_name -> unite.Publish
	13, // 11: unite.OutMsg.puback:type_name -> unite.Puback
	14, // 12: unite.OutMsg.pubrec:type_name -> unite.Pubrec
	15, // 13: unite.OutMsg.pubrel:type_name -> unite.Pubrel
	16, // 14: unite.OutMsg.pubcomp:type_name -> unite.Pubcomp
	0,  // 15: unite.FixedHeader.MessageType:type_name -> unite.MessageType
	17, // 16: unite.Subscribe.Subscribers:type_name -> unite.Subscriber
	17, // 17: unite.Unsubscribe.Subscribers:type_name -> unite.Subscriber
	3,  // 18: unite.Unite.Start:input_type -> unite.ConnInfo
	2,  // 19: unite.Unite.Stream:input_type -> unite.Packet
	1,  // 20: unite.Unite.Stop:input_type -> unite.Empty
	3,  // 21: unite.Unite.Start:output_type -> unite.ConnInfo
	2,  // 22: unite.Unite.Stream:output_type -> unite.Packet
	1,  // 23: unite.Unite.Stop:output_type -> unite.Empty
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_unite_proto_init() }
func file_unite_proto_init() {
	if File_unite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_unite_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pingreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pingresp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Puback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pubrec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pubrel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pubcomp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscriber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unsubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unite_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unsuback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_unite_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*InMsg_Pingreq)(nil),
		(*InMsg_Sub)(nil),
		(*InMsg_Unsub)(nil),
		(*InMsg_Pub)(nil),
		(*InMsg_Pubrec)(nil),
		(*InMsg_Pubrel)(nil),
		(*InMsg_Pubcomp)(nil),
	}
	file_unite_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*OutMsg_Pingresp)(nil),
		(*OutMsg_Suback)(nil),
		(*OutMsg_Unsuback)(nil),
		(*OutMsg_Pub)(nil),
		(*OutMsg_Puback)(nil),
		(*OutMsg_Pubrec)(nil),
		(*OutMsg_Pubrel)(nil),
		(*OutMsg_Pubcomp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_unite_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_unite_proto_goTypes,
		DependencyIndexes: file_unite_proto_depIdxs,
		EnumInfos:         file_unite_proto_enumTypes,
		MessageInfos:      file_unite_proto_msgTypes,
	}.Build()
	File_unite_proto = out.File
	file_unite_proto_rawDesc = nil
	file_unite_proto_goTypes = nil
	file_unite_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UniteClient is the client API for Unite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UniteClient interface {
	Start(ctx context.Context, in *ConnInfo, opts ...grpc.CallOption) (*ConnInfo, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Unite_StreamClient, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type uniteClient struct {
	cc grpc.ClientConnInterface
}

func NewUniteClient(cc grpc.ClientConnInterface) UniteClient {
	return &uniteClient{cc}
}

func (c *uniteClient) Start(ctx context.Context, in *ConnInfo, opts ...grpc.CallOption) (*ConnInfo, error) {
	out := new(ConnInfo)
	err := c.cc.Invoke(ctx, "/unite.Unite/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniteClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Unite_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Unite_serviceDesc.Streams[0], "/unite.Unite/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uniteStreamClient{stream}
	return x, nil
}

type Unite_StreamClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type uniteStreamClient struct {
	grpc.ClientStream
}

func (x *uniteStreamClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uniteStreamClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uniteClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/unite.Unite/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniteServer is the server API for Unite service.
type UniteServer interface {
	Start(context.Context, *ConnInfo) (*ConnInfo, error)
	Stream(Unite_StreamServer) error
	Stop(context.Context, *Empty) (*Empty, error)
}

// UnimplementedUniteServer can be embedded to have forward compatible implementations.
type UnimplementedUniteServer struct {
}

func (*UnimplementedUniteServer) Start(context.Context, *ConnInfo) (*ConnInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedUniteServer) Stream(Unite_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedUniteServer) Stop(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterUniteServer(s *grpc.Server, srv UniteServer) {
	s.RegisterService(&_Unite_serviceDesc, srv)
}

func _Unite_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniteServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unite.Unite/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniteServer).Start(ctx, req.(*ConnInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unite_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UniteServer).Stream(&uniteStreamServer{stream})
}

type Unite_StreamServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type uniteStreamServer struct {
	grpc.ServerStream
}

func (x *uniteStreamServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uniteStreamServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Unite_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniteServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unite.Unite/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniteServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Unite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unite.Unite",
	HandlerType: (*UniteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Unite_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Unite_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Unite_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "unite.proto",
}
